# spring에서 Session 처리
1. 스프링에서도 sessin 개념을 이용하여 client단과 server단의 연결 처리를 
	수행하여 로그인 후, session정보데이터를 DB로 가져와서 화면이 이동되더라도
	필요로 하는 권한별 체크를 하여, 권한에 따라 클릭 가능한 버튼, 이동가능한 메뉴
	session값을 등록함으로 권한의 비교 처리등 다양한 권한별 기능 처리가 
	가능하게 한다.
2. 주요기능 처리
	1) 로그인 후, session 처리
	2) 게시판에 등록자를 현재 session을 id로 등록
	3) 게시물의 수정/삭제시 현재 login한 session과 등록된 session을 비교하여
		해당 권한이 있을 때, 수정/삭제 하게 처리가능 처리
	4) session을 확인 후, session이 없을 때는 login 하여 처리되도록
		javascript단에서 처리..
3. 핵심 키워드/코드
	1) HttpSession session : 세션을 처리할 수 있는 객체로 로그인시, DB에 인증되었을
		때, 할당 처리.. 이후에 모든 화면에 이 session 유효만료기간에 따라 처리되게
		한다.
		.setAttribute("세션키", 할당할 객체)
	2) var memId = "${mem.id}"
		if(memId==""){
			alert("로그인이 필요로 합니다\n로그인 페이지이동");
			location.href="${path}/loginFrm.do"
		}	
	   function updateBoard()//deleteBoard(){
	   	    var writerVal=$("[name=writer]").val()
	   	    if(memId!=writerVal){
	   	    	alert("게시물의 수정/삭제는 등록자만이 가능합니다")
	   	    	return;
	   	    }
	   }	
	   function goPage(menu){
	   	   var memAuth="${mem.auth}"
	   	   if(menu=="adminMenu" && memAuth!="admin"){
	   	   	   alert("해당메뉴관리자 권한이 필요로 합니다")
	   	   	   return;
	   	   }
	   }
	3) 작성자를 session에 있는 id로만 저장 가능하게 처리..
		<input name="writer" readonly value="${mem.id}"/>
# 처리 순서
1. DB sql 확인
	member
	select * from member01 where id=#{id} and pwd=#{pwd}
	
	SELECT * FROM MEMBER WHERE id=#{id} AND pwd=#{pwd}
	
	class Member{
		private String id;
		private String pwd;
		private String name;
		private String auth;
		private int point;
	}	
2. dao 인터페이스 처리
	springweb.a02_mvc.a03_dao.A04_MemberDao
	interface A04_MemberDao
		Member login(Member sch);
3. controller(A04_MemberController.java)
	1) 로그인화면 호출
	2) 로그인 후, 처리 session 설정..
	3) 다른 메뉴에서 session 값 확인 테스트
4. service(A04_MemberService.java)
	dao 호출, 
5. view(/a03_mvc/a07_login.jsp)
WEB-INF\views\a03_mvc\a07_login.jsp
	로그인 화면 처리
ex) 위 내용을 board에 적용 처리하세요..
	
	
	
			
	 








		
	   
				