# 스프링을 통한 메일전송
1. 메일은 웹프로그래밍에서 활용할 수 있는 영역중에 하나이다.
	로그인시, 아이디나 비밀번호를 잊을때, 해당 사이트에 등록된 메일로 인증 정보를 발송한다든가
	사원가입시 임시비번을 발송받을 때, 또 해당 사이트에 특정 업무를 처리하면서 자동으로 메일을 발송하는 등
	여러가지 형태로 사용할 수 있다.
2. 메일을 웹 서비스로 처리하기 위해서 다음과 같은 단계를 거친다. 
	1) 메일 서버 구축
		- 발신 메일(SMTP)서버 : 메일을 보내는 서버이다
		- 수신 메일(POP)서버 : 메일을 받는 서버이다.
	2) 메일 발송 처리
		- 발송 내용을 입력한 후, SMTP서버를 통해 메일을 전송합니다.
		- 수신 메일 서버는 받는 메일을 보관하며, 연동된 계정으로 메일을 확인할 수 있다.
3. 개발순서
	1) 발신메일(SMTP)서버 선택 : 구글/다음과 같은 차용 서버 사용
		(메일 서버 구축은 시스템 영역에 속한다)
	2) 보안 설정 : 외부 대상자에게 메일을 보낼 수 있도록 SMTP 서버의 보안설정을 조정
		(구글/다음 등 메일서버 설정)
	3) 스프링 컨테이너 설정 : 발신 서버 정보, 계정, 비밀번호 등을 컨테이너(dispatch-servlet.xml)에 등록
	4) 화면구현 : 발송한 내용/수신자 등을 포함하는 화면(controller/view) 구현
	5) 발송 내용 전송 : 사용자가 발송 내용을 입력하고 전송 버튼을 클릭하면 컨트롤러가 호출
	6) 발신처리 : 서비스 계층에서 컨테이너에 설정된 정보를 이용하여 메일 발송 처리를 수행
	7) 컨트롤러 및 서비스 계층 구현 : 메일 발송 후, 서비스, 컨트롤러, 화면단을 처리

# 기타메일 속성값 설정 (service단에서 처리)
// 기타속성 설정
MimeMessageHelper helper = new MimeMessageHelper(
	mmsg,
	MimeMessageHelper.MULTIPART_MODE_MIXED_RELATED,
	StandardCharsets.UTF_8.name()
);
// 발신자 지정
helper.setFrom("발신자 메일 주소"); // 차용서버는 기준 계정으로만
helper.setTo("수신자 메일 주소");
helper.setCc("참조 메일 주소");
helper.setBcc("숨은 참조 주소");
helper.setSubject("메일 제목");
helper.setText("html형식 내용 설정 가능/내용입력");
helper.addAttachment("파일명", new File("실제파일경로와 파일명"));